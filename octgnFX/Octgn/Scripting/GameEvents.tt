<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text" #>
<#
    XDocument doc = XDocument.Load(Host.ResolvePath(@"..\..\Octgn.Library\Scripting\GameEvents.xml"));
#>
/* 
 * This file was automatically generated by Jesus!
 * Do not modify, or your sins will be regenerated!!
 * XML: <#= new System.IO.DirectoryInfo(Host.ResolvePath(@"..\..\Octgn.Library\Scripting\GameEvents.xml")).FullName #>
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Sockets;

namespace Octgn.Scripting
{
	public class GameEventProxy
	{
	    private Engine _engine;
	    
	    public GameEventProxy(Engine engine)
		{
			_engine = engine;
		}
		
	<#
    foreach (var eve in doc.Root.Elements().Where(x => x.Name.LocalName == "event"))
    {
        string eventName = eve.Attribute("name").Value;
        PopIndent();
    #>

		public void <#= eventName #>(<#= ParametersList(eve) #>)
		{
			<#
        var paramArray = eve.Elements().Where(x => x.Name.LocalName == "param").ToArray();
			#>
			var args = new object[<#= paramArray.Length.ToString() #>];
			<#
        for (var i = 0; i < paramArray.Length; i++)
        {
            WriteLine("args[" + i + "] = null;");
        }
			#>
			//_engine.ExecuteFunction("<#= eventName #>",)
			<# 
        //PushIndent("\t\t\t");
        foreach (var p in paramArray)
        {
            //string code;
            //if (!paramsOutput.TryGetValue(p.Attribute("type").Value, out code))
            //  code = "writer.Write({0});";
            //WriteLine(code, p.Attribute("name").Value);
        }
        PopIndent();
			#>
		}
<# } #>
}
}
<#+
    private string ParametersList(XElement eve)
    {
        var sb = new StringBuilder();
        foreach (var p in eve.Elements("param"))
            sb.Append(ConvertParamType(p.Attribute("type").Value))
              .Append(" ")
              .Append(p.Attribute("name").Value)
              .Append(", ");
        if (sb.Length > 0) sb.Remove(sb.Length - 2, 2);
        return sb.ToString();
    }

    private string ConvertParamType(string type)
    {
        switch (type)
        {
            case "Player":
                return "byte";
            case "ControllableObject":
            case "Group":
            case "Card":
            case "Counter":
                return "int";
            case "Player[]":
                return "byte[]";
            case "Group[]":
                return "int[]";
            case "Color?":
                return "string";
            default:
                return type;
        }
    }

    private Dictionary<string, string> paramsOutput = new Dictionary<string, string>()
  {
    { "Version", "{0}.ToString()" },
    { "Guid", "{0}.ToByteArray()" },
  
    { "Guid[]", @"writer.Write((short){0}.Length);
foreach (Guid g in {0})
	writer.Write(g.ToByteArray());" },

    { "CardOrientation", "writer.Write((byte){0});" },

    { "short[]", @"writer.Write((short){0}.Length);
foreach (short p in {0})
	writer.Write(p);" },

    { "int[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },
    
    { "Player[]", @"writer.Write((short){0}.Length);
foreach (byte p in {0})
	writer.Write(p);" },

    { "Group[]", @"writer.Write((short){0}.Length);
foreach (int p in {0})
	writer.Write(p);" },

    { "ulong[]", @"writer.Write((short){0}.Length);
			foreach (ulong p in {0})
				writer.Write(p);" }
  };
#>